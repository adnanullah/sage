/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Sage.
 *
 * The Initial Developer of the Original Code is
 * Peter Andrews <petea@jhu.edu>.
 * Portions created by the Initial Developer are Copyright (C) 2005
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 * Peter Andrews <petea@jhu.edu>
 * Erik Arvidsson <erik@eae.net>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
 
#include "nsISupports.idl"

[scriptable, uuid(763E994A-2124-4151-B1D9-A4B311035A5D)]
interface sageILogger: nsISupports {

	// logging level constants
	const unsigned short LEVEL_ALL = 0x00;
	const unsigned short LEVEL_DEBUG = 0x01;
	const unsigned short LEVEL_INFO = 0x02;
	const unsigned short LEVEL_WARN = 0x03;
	const unsigned short LEVEL_ERROR = 0x04;
	const unsigned short LEVEL_FATAL = 0x05;
	const unsigned short LEVEL_OFF = 0x06;

	void init();

	// set logging level
	void setLevel(in unsigned short level);

	// debug level message
	void debug(in AString aMessage);

	// info level message
	void info(in AString aMessage);

	// warn level message
	void warn(in AString aMessage);

	// error level message
	void error(in AString aMessage);

	// fatal level message
	void fatal(in AString aMessage);
};